public class DuelInput {

    public static void interpretInput(String[] input) {
        String action = input[0];
        String monsterName = Map.getLayout().getPlayer().getCurrentOpponent().toLowerCase();
        Monster monsterInBattle = Map.getLayout().getMonsterMap().get(monsterName);

        if (input.length > 2) {
            if (input[0].equalsIgnoreCase("attack") &&
                    input[1].equalsIgnoreCase("with")) {

                Item item = UtilityFunctions.convertToItem(input[2]);

                if (item != null) {
                    if (Map.getLayout().getPlayer().getCurrentItems().contains(item)) {
                        attackWithCommand(monsterInBattle, item);
                    } else {
                        System.out.println("I can't use items not in my inventory.");
                    }
                } else {
                    System.out.println("I cannot use " + input[2]);
                }

                return;
            }
        }

        switch (action.toLowerCase()) {
            case "attack":
                attackCommand(monsterInBattle);
                break;

            case "disengage":
                disengageCommand();
                break;

            case "status":
                statusCommand(monsterInBattle);
                break;

            case "list":
                System.out.println("You are carrying " +
                        UtilityFunctions.itemsAsString(
                                Map.getLayout().getPlayer().getCurrentItems()));
                break;

            case "playerinfo":
                playerinfoCommand();
                break;

            case "exit":
                System.exit(0);
                break;

            case "quit":
                System.exit(0);
                break;

            default:
                System.out.println("I can't do that, I am in a duel right now.");
                break;

        }
    }

    /** User attacks the monster. Check to see if monster has died. Then monster attacks user
     *  and check to see if player died.
     *
     * @param monsterInBattle Monster object of the monster in battle
     */
    private static void attackCommand(Monster monsterInBattle) {
        double damageToMonster = Map.getLayout().getPlayer().getAttack()
                - monsterInBattle.getDefense();

        playerAttackMonster(monsterInBattle, damageToMonster);

        // Monster attacking the player back
        if(Map.getLayout().getPlayer().isInDuel()) {
            double damageToPlayer = monsterInBattle.getAttack()
                    - Map.getLayout().getPlayer().getDefense();

            monsterAttackPlayer(monsterInBattle, damageToPlayer);
        }
    }

    /** User attacks the monster with an item. Check to see if monster has died.
     *  Then monster attacks user and check to see if player died.
     *
     * @param monsterInBattle Monster object of the monster in battle
     */
    private static void attackWithCommand(Monster monsterInBattle, Item item) {
        double damageToMonster = Map.getLayout().getPlayer().getAttack() +
                item.getDamage() - monsterInBattle.getDefense();

        playerAttackMonster(monsterInBattle, damageToMonster);
        Map.getLayout().getPlayer().getCurrentItems().remove(item);

        //Monster attacking the player back
        if(Map.getLayout().getPlayer().isInDuel()) {
            double damageToPlayer = monsterInBattle.getAttack()
                    - Map.getLayout().getPlayer().getDefense();

            monsterAttackPlayer(monsterInBattle, damageToPlayer);
        }
    }

    /** Helper method for the attack command methods. Handles damage done to monster.
     *
     * @param monsterInBattle Monster object of the monster in battle.
     * @param damageToMonster amount to subtract from monster's health.
     */
    private static void playerAttackMonster(Monster monsterInBattle, double damageToMonster) {
        double newMonsterHealth = monsterInBattle.getCurrentHealth() - damageToMonster;

        if (newMonsterHealth > monsterInBattle.getStartingHealth()) {
            monsterInBattle.setCurrentHealth(monsterInBattle.getStartingHealth());
        } else if(newMonsterHealth < 0) {
            monsterInBattle.setCurrentHealth(0);
        } else {
            monsterInBattle.setCurrentHealth(newMonsterHealth);
        }

        double damageRounded = Math.floor(damageToMonster * 100) / 100;
        double healthRounded = Math.floor(monsterInBattle.getCurrentHealth() * 100) / 100;

        System.out.println("You deal " + damageRounded
                + " damage to "+ monsterInBattle.getName());
        System.out.println(monsterInBattle.getName() + "'s current health is " + healthRounded);

        handleDuelStatus(monsterInBattle);
    }

    /** Helper method for the attack command methods. Handles damage done to player.
     *
     * @param monsterInBattle Monster object of the monster in battle.
     * @param damageToPlayer amount to subtract from player's health.
     */
    private static void monsterAttackPlayer(Monster monsterInBattle, double damageToPlayer) {
        double newPlayerHealth = Map.getLayout().getPlayer().getCurrentHealth() - damageToPlayer;

        if (newPlayerHealth > Map.getLayout().getPlayer().getMaxHealth()) {
            Map.getLayout().getPlayer().setCurrentHealth(
                    Map.getLayout().getPlayer().getMaxHealth());
        } else if(newPlayerHealth < 0) {
            Map.getLayout().getPlayer().setCurrentHealth(0);
        } else {
            Map.getLayout().getPlayer().setCurrentHealth(newPlayerHealth);
        }

        double damageRounded = Math.floor(damageToPlayer * 100) / 100;
        double healthRounded =
                Math.floor(Map.getLayout().getPlayer().getCurrentHealth() * 100) / 100;

        System.out.println(monsterInBattle.getName() + " deals "
                + damageRounded + " damage to you.");
        System.out.println("Your health is " + healthRounded);

        handleDuelStatus(monsterInBattle);
    }

    /** Checks if monster has been defeated or user has been killed.
     *
     * @param monsterInBattle Monster object of the monster in battle.
     */
    private static void handleDuelStatus(Monster monsterInBattle) {
        if(monsterInBattle.getCurrentHealth() <= 0) {
            Map.getLayout().getPlayer().setIsInDuel(false);
            Map.getLayout().getPlayer().getCurrentRoom()
                    .getMonstersInRoom().remove(monsterInBattle.getName());
            System.out.println("You've won the battle!");
            handleWin(monsterInBattle);
        } else if(Map.getLayout().getPlayer().getCurrentHealth() <= 0) {
            System.out.println(monsterInBattle.getName() + " has killed you.");
            Map.getLayout().getPlayer().setIsInDuel(false);
            System.exit(0);
        }
    }

    /** Increases user's experience and handles level up
     *
     * @param monsterInBattle Monster object of the monster in battle.
     */
    private static void handleWin(Monster monsterInBattle) {
        double experienceGained = (((monsterInBattle.getAttack() + monsterInBattle.getDefense()) / 2)
                + monsterInBattle.getStartingHealth())  * 20;
        Map.getLayout().getPlayer().setExperience(
                Map.getLayout().getPlayer().getExperience() + experienceGained);

        int levelOneExpRequired = 25;
        int levelTwoExpRequired = 50;

        if(Map.getLayout().getPlayer().getExperience() >= levelOneExpRequired &&
                Map.getLayout().getPlayer().getExperience() < levelTwoExpRequired) {
            Map.getLayout().getPlayer().setLevel(1);
        } else if(Map.getLayout().getPlayer().getExperience() >= levelTwoExpRequired) {
            int currentLevel = 1 + currentLevel(levelOneExpRequired, levelTwoExpRequired);
            if(currentLevel > Map.getLayout().getPlayer().getLevel()) {
                Map.getLayout().getPlayer().setLevel(currentLevel);
                handleLevelUp();
            }
        }
    }

    /** Recursive method of determining user's level based on their experience
     *
     * @param firstLevel The current level minus two.
     * @param secondLevel The current level minus one.
     * @return The current level of the player.
     */
    private static int currentLevel(double firstLevel, double secondLevel) {
        if(secondLevel > Map.getLayout().getPlayer().getExperience()) {
            return 0;
        }

        return 1 + currentLevel(secondLevel, (firstLevel + secondLevel) * 1.1);
    }

    /** Updates player's level, defense, attack, and max health. */
    private static void handleLevelUp() {
        final double ATTACK_MULTIPLIER = 1.5;
        final double DEFENSE_MULTIPLIER = 1.5;
        final double HEALTH_MULTIPLIER = 1.3;

        System.out.println("You are now at level " + Map.getLayout().getPlayer().getLevel());
        Map.getLayout().getPlayer().setAttack(
                Map.getLayout().getPlayer().getAttack() * ATTACK_MULTIPLIER);
        System.out.println("Your attack is now " + Map.getLayout().getPlayer().getAttack());
        Map.getLayout().getPlayer().setDefense(
                Map.getLayout().getPlayer().getDefense() * DEFENSE_MULTIPLIER);
        System.out.println("Your defense is now " + Map.getLayout().getPlayer().getDefense());
        Map.getLayout().getPlayer().setMaxHealth(
                Map.getLayout().getPlayer().getMaxHealth() * HEALTH_MULTIPLIER);
        System.out.println("Your max health is now "
                + Map.getLayout().getPlayer().getMaxHealth());
        Map.getLayout().getPlayer().setCurrentHealth(
                Map.getLayout().getPlayer().getMaxHealth());
        Map.getLayout().getPlayer().setExperience(0);
    }

    /** Player leaves the duel if they say disengage. */
    private static void disengageCommand() {
        Map.getLayout().getPlayer().setIsInDuel(false);
        Map.getLayout().getPlayer().setCurrentOpponent(null);
    }

    /** Displays the health of the user and monster using ascii values.
     *  Used: https://stackoverflow.com/questions/2051817/return-first-digit-of-an-integer
     *
     * @param monsterInBattle Monster object of the monster in battle.
     */
    private static void statusCommand(Monster monsterInBattle) {
        int percentConstant = 100;
        int percentPlayerHealth = (int) (Map.getLayout().getPlayer().getCurrentHealth()
                / Map.getLayout().getPlayer().getMaxHealth() * percentConstant);
        int percentMonsterHealth = (int) (monsterInBattle.getCurrentHealth()
                / monsterInBattle.getStartingHealth() * percentConstant);

        int playerHealthOutOfTen = (percentPlayerHealth + 5) / 10;
        int monsterHealthOutOfTen = (percentMonsterHealth + 5) / 10;

        System.out.print("Player health: ");
        for(int i = 0; i < 10; i++) {
            if(playerHealthOutOfTen > 0) {
                System.out.print("⬤");
                playerHealthOutOfTen--;
            } else {
                System.out.print('○');
            }
        }

        System.out.println();
        System.out.print("Monster health: ");

        for(int i = 0; i < 10; i++) {
            if(monsterHealthOutOfTen > 0) {
                System.out.print("⬤");
                monsterHealthOutOfTen--;
            } else {
                System.out.print('○');
            }
        }

        System.out.println();
    }

    /** Prints the player's level, attack, defense, and health. */
    private static void playerinfoCommand() {
        System.out.println("Here are your stats:");
        System.out.println("[Level]: " + Map.getLayout().getPlayer().getLevel());
        System.out.println("[Attack]: " + Map.getLayout().getPlayer().getAttack());
        System.out.println("[Defense]: " + Map.getLayout().getPlayer().getDefense());
        System.out.println("[Health]: " +
                Map.getLayout().getPlayer().getCurrentHealth());
    }
}
