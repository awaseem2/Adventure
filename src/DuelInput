public class DuelInput {

    public static void interpretInput(String[] input) {
        String action = input[0];
        String monsterString = Environment.getMap().getPlayer().getCurrentOpponent();
        Monster monsterInBattle = UtilityFunctions.convertToMonster(monsterString);

        if(input[0].equalsIgnoreCase("attack") &&
                input[0].equalsIgnoreCase("with")) {
            if(UtilityFunctions.convertToItem(input[3]) != null) {
                Item item = UtilityFunctions.convertToItem(input[3]);
                attackWithCommand(monsterString, monsterInBattle, item);
            }
        }

        switch (action.toLowerCase()) {
            case "attack":
                attackCommand(monsterString, monsterInBattle);
                break;


            case "disengage":
                disengageCommand();
                break;

            case "status":
                statusCommand(monsterInBattle);
                break;

            case "list":
                System.out.println("You are carrying " +
                        UtilityFunctions.itemsAsString(
                                Environment.getMap().getPlayer().getCurrentItems()));
                break;

            case "playerinfo":
                System.out.println("Here are your stats:");
                System.out.println("[Level]: " + Environment.getMap().getPlayer().getLevel());
                System.out.println("[Attack]: " + Environment.getMap().getPlayer().getAttack());
                System.out.println("[Defense]: " + Environment.getMap().getPlayer().getDefense());
                System.out.println("[Health]: " +
                        Environment.getMap().getPlayer().getCurrentHealth());
                break;

            case "exit":
                System.exit(0);
                break;

            case "quit":
                System.exit(0);
                break;

            default:
                System.out.println("I can't do that, there are monsters in this room.");
                break;

        }
    }

    private static void attackCommand(String monsterString, Monster monsterInBattle) {
        double damageToMonster = Environment.getMap().getPlayer().getAttack()
                - monsterInBattle.getDefense();
        monsterInBattle.setCurrentHealth(monsterInBattle.getCurrentHealth() - damageToMonster);
        System.out.println("You attack the monster by " + damageToMonster);
        System.out.println("The monster's current health is " + monsterInBattle.getCurrentHealth());
        handleDuelStatus(monsterString, monsterInBattle);

        if(Environment.getMap().getPlayer().isInDuel()) {
            //Monster attacking the player back
            double damageToPlayer = monsterInBattle.getAttack()
                    - Environment.getMap().getPlayer().getDefense();
            Environment.getMap().getPlayer().setCurrentHealth(
                    Environment.getMap().getPlayer().getCurrentHealth() - damageToPlayer);
            System.out.println("The monster damages you by " + damageToPlayer);
            System.out.println("Your health is "
                    + Environment.getMap().getPlayer().getCurrentHealth());
            handleDuelStatus(monsterString, monsterInBattle);
        }
    }

    private static void attackWithCommand(String monsterString, Monster monsterInBattle, Item item) {
        double damageToMonster = Environment.getMap().getPlayer().getAttack() +
                item.getDamage() - monsterInBattle.getDefense();
        monsterInBattle.setCurrentHealth(monsterInBattle.getCurrentHealth() - damageToMonster);
        System.out.println("You attack the monster by " + damageToMonster);
        System.out.println("The monster's current health is " + monsterInBattle.getCurrentHealth());
        handleDuelStatus(monsterString, monsterInBattle);

        if(Environment.getMap().getPlayer().isInDuel()) {
            //Monster attacking the player back
            double damageToPlayer = monsterInBattle.getAttack()
                    - Environment.getMap().getPlayer().getDefense();
            Environment.getMap().getPlayer().setCurrentHealth(
                    Environment.getMap().getPlayer().getCurrentHealth() - damageToPlayer);
            System.out.println("The monster damages you by " + damageToPlayer);
            System.out.println("Your health is "
                    + Environment.getMap().getPlayer().getCurrentHealth());
            handleDuelStatus(monsterString, monsterInBattle);
        }
    }

    private static void handleDuelStatus(String monsterString, Monster monsterInBattle) {
        if(monsterInBattle.getCurrentHealth() <= 0) {
            Environment.getMap().getPlayer().setIsInDuel(false);
            Environment.getMap().getPlayer().getCurrentRoom()
                    .getMonstersInRoom().remove(monsterInBattle.getName());
            System.out.println("You've won the battle!");
            handleWin(monsterString, monsterInBattle);
        } else if(Environment.getMap().getPlayer().getCurrentHealth() <= 0) {
            System.out.println(monsterString + " has killed you.");
            Environment.getMap().getPlayer().setIsInDuel(false);
            System.exit(0);
        }
    }

    private static void handleWin(String monsterString, Monster monsterInBattle) {
        double experienceGained = (((monsterInBattle.getAttack() + monsterInBattle.getDefense()) / 2)
                + monsterInBattle.getStartingHealth())  * 20;
        Environment.getMap().getPlayer().setExperience(
                Environment.getMap().getPlayer().getExperience() + experienceGained);

        int levelOneExpRequired = 25;
        int levelTwoExpRequired = 50;

        if(Environment.getMap().getPlayer().getExperience() >= levelOneExpRequired &&
                Environment.getMap().getPlayer().getExperience() < levelTwoExpRequired) {
            Environment.getMap().getPlayer().setLevel(1);
        } else if(Environment.getMap().getPlayer().getExperience() >= levelTwoExpRequired) {
            int currentLevel = 1 + currentLevel(levelOneExpRequired, levelTwoExpRequired);
            System.out.println("current level: " + currentLevel);
            System.out.println("experience: " + Environment.getMap().getPlayer().getExperience());
            if(currentLevel > Environment.getMap().getPlayer().getLevel()) {
                Environment.getMap().getPlayer().setLevel(currentLevel);
                handleLevelUp();
            }
        }
    }

    private static int currentLevel(double firstLevel, double secondLevel) {
        if(secondLevel > Environment.getMap().getPlayer().getExperience()) {
            return 0;
        }

        return 1 + currentLevel(secondLevel, (firstLevel + secondLevel) * 1.1);
    }

    private static void handleLevelUp() {
        System.out.println("You are now at level " + Environment.getMap().getPlayer().getLevel());
        Environment.getMap().getPlayer().setAttack(
                Environment.getMap().getPlayer().getAttack() * 1.5);
        Environment.getMap().getPlayer().setDefense(
                Environment.getMap().getPlayer().getDefense() * 1.5);
        Environment.getMap().getPlayer().setMaxHealth(
                Environment.getMap().getPlayer().getMaxHealth() * 1.3);
        Environment.getMap().getPlayer().setCurrentHealth(
                Environment.getMap().getPlayer().getMaxHealth());
    }

    private static void disengageCommand() {
        Environment.getMap().getPlayer().setIsInDuel(false);
    }

    /**
     * Used: https://stackoverflow.com/questions/2051817/return-first-digit-of-an-integer
     *
     * @param monsterInBattle
     */
    private static void statusCommand(Monster monsterInBattle) {
        int percentConstant = 100;
        int percentPlayerHealth = (int) (Environment.getMap().getPlayer().getCurrentHealth()
                / Environment.getMap().getPlayer().getMaxHealth() * percentConstant);
        int percentMonsterHealth = (int) (monsterInBattle.getCurrentHealth()
                / monsterInBattle.getStartingHealth() * percentConstant);

        int playerHealthOutOfTen = ((percentPlayerHealth + 5) / 10) * 10;
        int monsterHealthOutOfTen = ((percentMonsterHealth + 5) / 10) * 10;

        System.out.print("Player health: ");
        for(int i = 0; i < 10; i++) {
            if(playerHealthOutOfTen > 0) {
                System.out.print("#");
                playerHealthOutOfTen--;
            } else {
                System.out.print('_');
            }
        }

        System.out.println();
        System.out.print("Monster health: ");
        for(int i = 0; i < 10; i++) {
            if(monsterHealthOutOfTen > 0) {
                System.out.print("#");
                monsterHealthOutOfTen--;
            } else {
                System.out.print('_');
            }
        }
    }
}
